{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { createStore } from \"vuex\";\nimport { commentStore } from \"./commentStore\";\nimport { folder } from \"jszip\";\nconst generateUniqueId = () => \"_\" + Math.random().toString(36).substr(2, 9);\nfunction prettySortFolderElements(folderArray) {\n  const sortedFolders = [];\n  const sortedFiles = [];\n  if (folderArray.children && Array.isArray(folderArray.children)) {\n    folderArray.children.forEach(currentElement => {\n      if (currentElement.type === \"folder\") {\n        sortedFolders.push(currentElement);\n      } else if (currentElement.type === \"text/plain\") {\n        sortedFiles.push(currentElement);\n      } else {\n        console.log(`ERROR: unknown type ${currentElement.type}`);\n      }\n    });\n  }\n  function compare(a, b) {\n    if (a.name < b.name) {\n      return -1;\n    }\n    if (a.name > b.name) {\n      return 1;\n    }\n    return 0;\n  }\n  sortedFolders.sort(compare);\n  sortedFiles.sort(compare);\n  const sortedAllElements = [...sortedFolders, ...sortedFiles];\n  return sortedAllElements;\n}\nconst store = createStore({\n  modules: {\n    comment: commentStore\n  },\n  state: {\n    repositories: [],\n    newRepository: \"\",\n    newRepositoryName: \"\",\n    newFile: \"\",\n    selectedRepository: null,\n    expandedFolder: null,\n    selectedFile: null,\n    selectedFileContent: \"\",\n    textarea: \"\",\n    comments: []\n  },\n  mutations: {\n    createRepository(state, name) {\n      const newRepository = {\n        id: generateUniqueId(),\n        name: name || \"Новый репозиторий\",\n        // если name не передан, используй дефолтное значение\n        files: [],\n        level: 0,\n        children: [],\n        type: \"folder\"\n      };\n      state.repositories.push(newRepository);\n    },\n    createFolderInRepository(state, folderName) {\n      if (state.selectedRepository) {\n        const newFolder = {\n          id: generateUniqueId(),\n          name: folderName || \"Новая папка\",\n          type: \"folder\",\n          files: [],\n          children: []\n        };\n      }\n    },\n    createFileInRepository(state, fileName) {\n      if (state.selectedRepository) {\n        const name = fileName.trim() !== \"\" ? fileName : \"Новый файл.txt\";\n        const lastModified = new Date().getTime();\n        const newFile = {\n          id: generateUniqueId(),\n          name: name,\n          type: \"text/plain\",\n          content: \"\",\n          lastModified\n        };\n        state.newFile = newFile;\n        state.selectedRepository.files.push(newFile);\n        state.selectedFile = newFile;\n      }\n    },\n    setSelectedFolder(state, folder) {\n      state.expandedFolder = folder;\n      console.log(\"folder store:\", folder);\n      if (folder && folder.type === \"folder\" && folder.children !== null) {\n        // Check if folder.files is an array before sorting\n        if (Array.isArray(folder.children)) {\n          folder.children = prettySortFolderElements(folder);\n        } else {\n          console.log(`ERROR: folder.files is not an array`);\n        }\n      }\n    },\n    selectRepository(state, repository) {\n      state.selectedRepository = repository;\n    },\n    setSelectedFile(state, file) {\n      state.selectedFile = file;\n    },\n    updateFileContent(state, content) {\n      if (state.selectedRepository && state.selectedFile) {\n        const repository = state.selectedRepository;\n        const fileIndex = repository.files.findIndex(file => file.lastModified === state.selectedFile.lastModified);\n        if (fileIndex !== -1) {\n          repository.files[fileIndex].content = content;\n          state.textarea = content;\n        }\n      }\n    },\n    renameItem(state, file) {\n      if (state.selectedFile === file) {\n        const repository = state.selectedRepository;\n        const fileIndex = repository.files.findIndex(file => file.lastModified === state.selectedFile.lastModified);\n        if (fileIndex !== -1) {\n          repository.files[fileIndex].name = file.name;\n        }\n      }\n    },\n    setRepositoryContent(state, {\n      repository,\n      content\n    }) {\n      repository.files = content;\n    },\n    addComment(state, {\n      file,\n      lineNumber,\n      author,\n      text\n    }) {\n      const comment = {\n        file,\n        lineNumber,\n        author,\n        text\n      };\n      state.comments.push(comment);\n    },\n    // deleteFileFromRepositories(state, fileId) {\n    //   const deleteFileRecursively = (array) => {\n    //     if (!array || !Array.isArray(array)) {\n    //       console.log('это не массив')\n    //       return;\n    //     }\n\n    //     for (let i = 0; i < array.length; i++) {\n    //       const item = array[i];\n\n    //       if (item && item.id === fileId) {\n    //         // Удалить выбранный файл из родительского массива\n    //         array.splice(i, 1);\n    //         return;\n    //       }\n\n    //       if (item && item.children && item.children.length > 0) {\n    //         deleteFileRecursively(item.children);\n    //       }\n    //     }\n    //   };\n\n    //   const traverseRepositories = (repositories) => {\n    //     if (!repositories || !Array.isArray(repositories)) {\n    //       return;\n    //     }\n\n    //     repositories.forEach((repository) => {\n    //       deleteFileRecursively(repository.files);\n\n    //       if (repository.children && repository.children.length > 0) {\n    //         traverseRepositories(repository.children);\n    //       }\n    //     });\n    //   };\n\n    //   traverseRepositories(state.repositories);\n    // },\n\n    deleteFile(state) {\n      console.log(\"start:\");\n      console.log(\"selectedRepository:\", state.selectedRepository);\n      if (state.selectedRepository && state.selectedFile || state.expandedFolder) {\n        console.log(\"state.selectedFile:\", state.selectedFile);\n        const repository = state.selectedRepository;\n        console.log(\"repository:\", repository);\n        const removeFile = entity => {\n          console.log(\"enter to remove file:\", entity);\n          if (Array.isArray(entity)) {\n            console.log(\"entity is array:\", entity);\n            entity.forEach((child, index) => {\n              if (child.type === \"folder\") {\n                if (child === state.expandedFolder) {\n                  console.log(\"child === state.expandedFolder\", entity);\n                  entity.splice(index, 1);\n                } else {\n                  removeFile(child.children);\n                }\n              } else if (child.type === \"text/plain\" && child === state.selectedFile) {\n                entity.splice(index, 1);\n              } else {\n                console.log(`ERROR: Unknown type ${child.type}`);\n              }\n            });\n          } else {\n            console.log(`ERROR: entity is not an array`);\n          }\n        };\n        removeFile(repository.children);\n      }\n    }\n  },\n  actions: {\n    createRepository({\n      commit,\n      state\n    }, name) {\n      commit(\"createRepository\", name);\n    },\n    createFolderInRepository({\n      commit,\n      state\n    }, folderName) {\n      commit(\"createFolderInRepository\", folderName);\n    },\n    // Действие для создания файла в выбранном репозитории\n    createFileInRepository({\n      commit,\n      state\n    }, fileName) {\n      commit(\"createFileInRepository\", fileName);\n    },\n    selectRepository({\n      commit\n    }, repository) {\n      commit(\"selectRepository\", repository);\n    },\n    setSelectedFile({\n      commit\n    }, file) {\n      commit(\"setSelectedFile\", file);\n    },\n    setSelectedFolder({\n      commit\n    }, folder) {\n      commit(\"setSelectedFolder\", folder);\n    },\n    updateFileContent({\n      commit\n    }, content) {\n      commit(\"updateFileContent\", content);\n    },\n    renameItem({\n      commit\n    }, {\n      originalItem,\n      updatedItem\n    }) {\n      commit(\"renameItem\", {\n        originalItem,\n        updatedItem\n      });\n    }\n  },\n  getters: {\n    selectedFile: state => state.selectedFile\n  }\n});\nexport default store;","map":{"version":3,"names":["createStore","commentStore","folder","generateUniqueId","Math","random","toString","substr","prettySortFolderElements","folderArray","sortedFolders","sortedFiles","children","Array","isArray","forEach","currentElement","type","push","console","log","compare","a","b","name","sort","sortedAllElements","store","modules","comment","state","repositories","newRepository","newRepositoryName","newFile","selectedRepository","expandedFolder","selectedFile","selectedFileContent","textarea","comments","mutations","createRepository","id","files","level","createFolderInRepository","folderName","newFolder","createFileInRepository","fileName","trim","lastModified","Date","getTime","content","setSelectedFolder","selectRepository","repository","setSelectedFile","file","updateFileContent","fileIndex","findIndex","renameItem","setRepositoryContent","addComment","lineNumber","author","text","deleteFile","removeFile","entity","child","index","splice","actions","commit","originalItem","updatedItem","getters"],"sources":["C:/Users/PC/Desktop/vue/vue-code-collaborator/src/store/index.js"],"sourcesContent":["import { createStore } from \"vuex\";\r\n\r\nimport { commentStore } from \"./commentStore\";\r\nimport { folder } from \"jszip\";\r\n\r\nconst generateUniqueId = () => \"_\" + Math.random().toString(36).substr(2, 9);\r\nfunction prettySortFolderElements(folderArray) {\r\n  const sortedFolders = [];\r\n  const sortedFiles = [];\r\n\r\n  if (folderArray.children && Array.isArray(folderArray.children)) {\r\n    folderArray.children.forEach((currentElement) => {\r\n      if (currentElement.type === \"folder\") {\r\n        sortedFolders.push(currentElement);\r\n      } else if (currentElement.type === \"text/plain\") {\r\n        sortedFiles.push(currentElement);\r\n      } else {\r\n        console.log(`ERROR: unknown type ${currentElement.type}`);\r\n      }\r\n    });\r\n  }\r\n\r\n  function compare(a, b) {\r\n    if (a.name < b.name) {\r\n      return -1;\r\n    }\r\n    if (a.name > b.name) {\r\n      return 1;\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  sortedFolders.sort(compare);\r\n  sortedFiles.sort(compare);\r\n  const sortedAllElements = [...sortedFolders, ...sortedFiles];\r\n  return sortedAllElements;\r\n}\r\n\r\nconst store = createStore({\r\n  modules: {\r\n    comment: commentStore,\r\n  },\r\n  state: {\r\n    repositories: [],\r\n    newRepository: \"\",\r\n    newRepositoryName: \"\",\r\n    newFile: \"\",\r\n    selectedRepository: null,\r\n    expandedFolder: null,\r\n    selectedFile: null,\r\n    selectedFileContent: \"\",\r\n    textarea: \"\",\r\n    comments: [],\r\n  },\r\n  mutations: {\r\n    createRepository(state, name) {\r\n      const newRepository = {\r\n        id: generateUniqueId(),\r\n        name: name || \"Новый репозиторий\", // если name не передан, используй дефолтное значение\r\n        files: [],\r\nlevel: 0,\r\n        children: [],\r\n        type: \"folder\",\r\n      };\r\n      state.repositories.push(newRepository);\r\n    },\r\n    createFolderInRepository(state, folderName) {\r\n      if (state.selectedRepository) {\r\n        const newFolder = {\r\n          id: generateUniqueId(),\r\n          name: folderName || \"Новая папка\",\r\n          type: \"folder\",\r\n          files: [],\r\n          children: [],\r\n        };\r\n      }\r\n    },\r\n\r\n    createFileInRepository(state, fileName) {\r\n      if (state.selectedRepository) {\r\n        const name = fileName.trim() !== \"\" ? fileName : \"Новый файл.txt\";\r\n        const lastModified = new Date().getTime();\r\n        const newFile = {\r\n          id: generateUniqueId(),\r\n          name: name,\r\n          type: \"text/plain\",\r\n          content: \"\",\r\n          lastModified,\r\n        };\r\n\r\n        state.newFile = newFile;\r\n        state.selectedRepository.files.push(newFile);\r\n        state.selectedFile = newFile;\r\n      }\r\n    },\r\n\r\n    setSelectedFolder(state, folder) {\r\n      state.expandedFolder = folder;\r\n      console.log(\"folder store:\", folder);\r\n\r\n      if (folder && folder.type === \"folder\" && folder.children !== null) {\r\n        // Check if folder.files is an array before sorting\r\n        if (Array.isArray(folder.children)) {\r\n          folder.children = prettySortFolderElements(folder);\r\n        } else {\r\n          console.log(`ERROR: folder.files is not an array`);\r\n        }\r\n      }\r\n    },\r\n    selectRepository(state, repository) {\r\n      state.selectedRepository = repository;\r\n    },\r\n    setSelectedFile(state, file) {\r\n      state.selectedFile = file;\r\n    },\r\n    updateFileContent(state, content) {\r\n      if (state.selectedRepository && state.selectedFile) {\r\n        const repository = state.selectedRepository;\r\n        const fileIndex = repository.files.findIndex(\r\n          (file) => file.lastModified === state.selectedFile.lastModified\r\n        );\r\n\r\n        if (fileIndex !== -1) {\r\n          repository.files[fileIndex].content = content;\r\n          state.textarea = content;\r\n        }\r\n      }\r\n    },\r\n    renameItem(state, file) {\r\n      if (state.selectedFile === file) {\r\n        const repository = state.selectedRepository;\r\n        const fileIndex = repository.files.findIndex(\r\n          (file) => file.lastModified === state.selectedFile.lastModified\r\n        );\r\n\r\n        if (fileIndex !== -1) {\r\n          repository.files[fileIndex].name = file.name;\r\n        }\r\n      }\r\n    },\r\n\r\n    setRepositoryContent(state, { repository, content }) {\r\n      repository.files = content;\r\n    },\r\n\r\n    addComment(state, { file, lineNumber, author, text }) {\r\n      const comment = {\r\n        file,\r\n        lineNumber,\r\n        author,\r\n        text,\r\n      };\r\n      state.comments.push(comment);\r\n    },\r\n\r\n    // deleteFileFromRepositories(state, fileId) {\r\n    //   const deleteFileRecursively = (array) => {\r\n    //     if (!array || !Array.isArray(array)) {\r\n    //       console.log('это не массив')\r\n    //       return;\r\n    //     }\r\n\r\n    //     for (let i = 0; i < array.length; i++) {\r\n    //       const item = array[i];\r\n\r\n    //       if (item && item.id === fileId) {\r\n    //         // Удалить выбранный файл из родительского массива\r\n    //         array.splice(i, 1);\r\n    //         return;\r\n    //       }\r\n\r\n    //       if (item && item.children && item.children.length > 0) {\r\n    //         deleteFileRecursively(item.children);\r\n    //       }\r\n    //     }\r\n    //   };\r\n\r\n    //   const traverseRepositories = (repositories) => {\r\n    //     if (!repositories || !Array.isArray(repositories)) {\r\n    //       return;\r\n    //     }\r\n\r\n    //     repositories.forEach((repository) => {\r\n    //       deleteFileRecursively(repository.files);\r\n\r\n    //       if (repository.children && repository.children.length > 0) {\r\n    //         traverseRepositories(repository.children);\r\n    //       }\r\n    //     });\r\n    //   };\r\n\r\n    //   traverseRepositories(state.repositories);\r\n    // },\r\n\r\n    deleteFile(state) {\r\n      console.log(\"start:\");\r\n      console.log(\"selectedRepository:\", state.selectedRepository);\r\n      if (\r\n        (state.selectedRepository && state.selectedFile) ||\r\n        state.expandedFolder\r\n      ) {\r\n        console.log(\"state.selectedFile:\", state.selectedFile);\r\n        const repository = state.selectedRepository;\r\n        console.log(\"repository:\", repository);\r\n        const removeFile = (entity) => {\r\n          console.log(\"enter to remove file:\", entity);\r\n          if (Array.isArray(entity)) {\r\n            console.log(\"entity is array:\", entity);\r\n            entity.forEach((child, index) => {\r\n              if (child.type === \"folder\") {\r\n                if (child === state.expandedFolder) {\r\n                  console.log(\"child === state.expandedFolder\", entity);\r\n                  entity.splice(index, 1);\r\n                } else {\r\n                  removeFile(child.children);\r\n                }\r\n              } else if (\r\n                child.type === \"text/plain\" &&\r\n                child === state.selectedFile\r\n              ) {\r\n                entity.splice(index, 1);\r\n              } else {\r\n                console.log(`ERROR: Unknown type ${child.type}`);\r\n              }\r\n            });\r\n          } else {\r\n            console.log(`ERROR: entity is not an array`);\r\n          }\r\n        };\r\n\r\n        removeFile(repository.children);\r\n      }\r\n    },\r\n  },\r\n  actions: {\r\n    createRepository({ commit, state }, name) {\r\n      commit(\"createRepository\", name);\r\n    },\r\n    createFolderInRepository({ commit, state }, folderName) {\r\n      commit(\"createFolderInRepository\", folderName);\r\n    },\r\n\r\n    // Действие для создания файла в выбранном репозитории\r\n    createFileInRepository({ commit, state }, fileName) {\r\n      commit(\"createFileInRepository\", fileName);\r\n    },\r\n    selectRepository({ commit }, repository) {\r\n      commit(\"selectRepository\", repository);\r\n    },\r\n    setSelectedFile({ commit }, file) {\r\n      commit(\"setSelectedFile\", file);\r\n    },\r\n    setSelectedFolder({ commit }, folder) {\r\n      commit(\"setSelectedFolder\", folder);\r\n    },\r\n    updateFileContent({ commit }, content) {\r\n      commit(\"updateFileContent\", content);\r\n    },\r\n\r\n    renameItem({ commit }, { originalItem, updatedItem }) {\r\n      commit(\"renameItem\", { originalItem, updatedItem });\r\n    },\r\n  },\r\n  getters: {\r\n    selectedFile: (state) => state.selectedFile,\r\n  },\r\n});\r\n\r\nexport default store;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}