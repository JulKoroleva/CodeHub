{"ast":null,"code":"import Codemirror from \"codemirror-editor-vue3\";\n\n// placeholder\nimport \"codemirror/addon/display/placeholder.js\";\n\n// language\nimport \"codemirror/mode/javascript/javascript.js\";\n// placeholder\nimport \"codemirror/addon/display/placeholder.js\";\n// theme\nimport \"codemirror/theme/dracula.css\";\nimport { ref } from \"vue\";\nexport default {\n  components: {\n    Codemirror\n  },\n  setup() {\n    const code = ref(`\nvar i = 0;\nfor (; i < 9; i++) {\n  console.log(i);\n  // more statements\n}`);\n    return {\n      code,\n      cmOptions: {\n        mode: \"text/javascript\",\n        // Language mode\n        theme: \"dracula\" // Theme\n      }\n    };\n  },\n\n  props: {\n    selectedRepository: Array\n  },\n  data() {\n    return {\n      textarea: \"\",\n      isFileChanged: false\n    };\n  },\n  watch: {\n    \"$store.state.selectedFile\": function (newFile) {\n      if (newFile && newFile.type === \"text/plain\") {\n        this.textarea = newFile.content || \"\";\n      }\n    }\n  },\n  methods: {\n    loadFileContent(file) {\n      if (file && file.type === \"text/plain\") {\n        const codeMirrorInstance = CodeMirror(this.$refs.codeMirror, {\n          value: file.content || \"\",\n          mode: \"text/plain\",\n          // Установите нужный режим\n          lineNumbers: true // Опционально: показать номера строк\n        });\n\n        codeMirrorInstance.on(\"change\", editor => {\n          this.$store.commit(\"updateFileContent\", editor.getValue());\n        });\n      }\n    },\n    saveFileContent() {\n      this.$store.commit(\"updateFileContent\", this.textarea);\n      this.isFileChanged = false;\n    },\n    change(newValue) {\n      this.$store.commit(\"updateFileContent\", newValue);\n      this.isFileChanged = true; // Set the flag when the text changes\n    }\n  },\n\n  computed: {\n    selectedFile() {\n      if (this.selectedRepository && this.selectedRepository.files) {\n        return this.selectedRepository.files.find(file => file === this.$store.state.selectedFile);\n      }\n      return null;\n    }\n  }\n};","map":{"version":3,"names":["Codemirror","ref","components","setup","code","cmOptions","mode","theme","props","selectedRepository","Array","data","textarea","isFileChanged","watch","$store.state.selectedFile","newFile","type","content","methods","loadFileContent","file","codeMirrorInstance","CodeMirror","$refs","codeMirror","value","lineNumbers","on","editor","$store","commit","getValue","saveFileContent","change","newValue","computed","selectedFile","files","find","state"],"sources":["C:\\Users\\PC\\Desktop\\vue\\vue-code-collaborator\\src\\components\\CodeEditor.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <div v-if=\"$store.state.selectedFile\" class=\"code-editor__container\">\r\n      <h3 style=\"margin: 0\">\r\n        {{ $store.state.selectedFile ? $store.state.selectedFile.name : \"\"\r\n        }}{{ isFileChanged ? \"*\" : \"\" }}\r\n      </h3>\r\n      <Codemirror\r\n        v-model:value=\"textarea\"\r\n        :options=\"cmOptions\"\r\n        placeholder=\"test placeholder\"\r\n        :height=\"600\"\r\n        @input=\"change\"\r\n      />\r\n      <div\r\n        class=\"code-editor__save-btn\"\r\n        :style=\"{ opacity: isFileChanged ? 1 : 0.5 }\"\r\n      >\r\n        <button\r\n          v-show=\"this.$store.state.selectedFile\"\r\n          @click=\"saveFileContent\"\r\n          :disabled=\"!$store.state.selectedFile\"\r\n          style=\"width: 100%; background-color: transparent; border: none\"\r\n        >\r\n          Сохранить\r\n        </button>\r\n      </div>\r\n    </div>\r\n    <div v-else>\r\n      <p>No file selected</p>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport Codemirror from \"codemirror-editor-vue3\";\r\n\r\n// placeholder\r\nimport \"codemirror/addon/display/placeholder.js\";\r\n\r\n// language\r\nimport \"codemirror/mode/javascript/javascript.js\";\r\n// placeholder\r\nimport \"codemirror/addon/display/placeholder.js\";\r\n// theme\r\nimport \"codemirror/theme/dracula.css\";\r\n\r\n\r\nimport { ref } from \"vue\";\r\nexport default {\r\n  components: { Codemirror },\r\n  setup() {\r\n    const code = ref(`\r\nvar i = 0;\r\nfor (; i < 9; i++) {\r\n  console.log(i);\r\n  // more statements\r\n}`);\r\n\r\n    return {\r\n      code,\r\n      cmOptions: {\r\n        mode: \"text/javascript\", // Language mode\r\n        theme: \"dracula\", // Theme\r\n      },\r\n    };\r\n  },\r\n  props: {\r\n    selectedRepository: Array,\r\n  },\r\n\r\n  data() {\r\n    return {\r\n      textarea: \"\",\r\n      isFileChanged: false,\r\n    };\r\n  },\r\n  watch: {\r\n    \"$store.state.selectedFile\": function (newFile) {\r\n      if (newFile && newFile.type === \"text/plain\") {\r\n        this.textarea = newFile.content || \"\"; \r\n      }\r\n    },\r\n  },\r\n  methods: {\r\n    loadFileContent(file) {\r\n      if (file && file.type === \"text/plain\") {\r\n        const codeMirrorInstance = CodeMirror(this.$refs.codeMirror, {\r\n          value: file.content || \"\",\r\n          mode: \"text/plain\", // Установите нужный режим\r\n          lineNumbers: true, // Опционально: показать номера строк\r\n        });\r\n\r\n        codeMirrorInstance.on(\"change\", (editor) => {\r\n          this.$store.commit(\"updateFileContent\", editor.getValue());\r\n        });\r\n      }\r\n    },\r\n    saveFileContent() {\r\n      this.$store.commit(\"updateFileContent\", this.textarea);\r\n      this.isFileChanged = false;\r\n    },\r\n\r\n    change(newValue) {\r\n      this.$store.commit(\"updateFileContent\", newValue);\r\n      this.isFileChanged = true; // Set the flag when the text changes\r\n    },\r\n  },\r\n  computed: {\r\n    selectedFile() {\r\n      if (this.selectedRepository && this.selectedRepository.files) {\r\n        return this.selectedRepository.files.find(\r\n          (file) => file === this.$store.state.selectedFile\r\n        );\r\n      }\r\n      return null;\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.code-editor__container {\r\n  width: 71vw;\r\n  min-height: 70vh;\r\n  text-align: left;\r\n  margin-right: 10px;\r\n}\r\n.CodeMirror-code {\r\n  text-align: left;\r\n}\r\n\r\n.codemirror-container {\r\n  border-radius: 4px;\r\n}\r\n\r\n.code-editor__save-btn {\r\n  width: 100%;\r\n  background-color: #bfbfbf;\r\n  border-radius: 4px;\r\n}\r\n</style>"],"mappings":"AAmCA,OAAOA,UAAS,MAAO,wBAAwB;;AAE/C;AACA,OAAO,yCAAyC;;AAEhD;AACA,OAAO,0CAA0C;AACjD;AACA,OAAO,yCAAyC;AAChD;AACA,OAAO,8BAA8B;AAGrC,SAASC,GAAE,QAAS,KAAK;AACzB,eAAe;EACbC,UAAU,EAAE;IAAEF;EAAW,CAAC;EAC1BG,KAAKA,CAAA,EAAG;IACN,MAAMC,IAAG,GAAIH,GAAG,CAAC;AACrB;AACA;;;AAGA,EAAE,CAAC;IAEC,OAAO;MACLG,IAAI;MACJC,SAAS,EAAE;QACTC,IAAI,EAAE,iBAAiB;QAAE;QACzBC,KAAK,EAAE,SAAS,CAAE;MACpB;IACF,CAAC;EACH,CAAC;;EACDC,KAAK,EAAE;IACLC,kBAAkB,EAAEC;EACtB,CAAC;EAEDC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,QAAQ,EAAE,EAAE;MACZC,aAAa,EAAE;IACjB,CAAC;EACH,CAAC;EACDC,KAAK,EAAE;IACL,2BAA2B,EAAE,SAAAC,CAAUC,OAAO,EAAE;MAC9C,IAAIA,OAAM,IAAKA,OAAO,CAACC,IAAG,KAAM,YAAY,EAAE;QAC5C,IAAI,CAACL,QAAO,GAAII,OAAO,CAACE,OAAM,IAAK,EAAE;MACvC;IACF;EACF,CAAC;EACDC,OAAO,EAAE;IACPC,eAAeA,CAACC,IAAI,EAAE;MACpB,IAAIA,IAAG,IAAKA,IAAI,CAACJ,IAAG,KAAM,YAAY,EAAE;QACtC,MAAMK,kBAAiB,GAAIC,UAAU,CAAC,IAAI,CAACC,KAAK,CAACC,UAAU,EAAE;UAC3DC,KAAK,EAAEL,IAAI,CAACH,OAAM,IAAK,EAAE;UACzBZ,IAAI,EAAE,YAAY;UAAE;UACpBqB,WAAW,EAAE,IAAI,CAAE;QACrB,CAAC,CAAC;;QAEFL,kBAAkB,CAACM,EAAE,CAAC,QAAQ,EAAGC,MAAM,IAAK;UAC1C,IAAI,CAACC,MAAM,CAACC,MAAM,CAAC,mBAAmB,EAAEF,MAAM,CAACG,QAAQ,CAAC,CAAC,CAAC;QAC5D,CAAC,CAAC;MACJ;IACF,CAAC;IACDC,eAAeA,CAAA,EAAG;MAChB,IAAI,CAACH,MAAM,CAACC,MAAM,CAAC,mBAAmB,EAAE,IAAI,CAACnB,QAAQ,CAAC;MACtD,IAAI,CAACC,aAAY,GAAI,KAAK;IAC5B,CAAC;IAEDqB,MAAMA,CAACC,QAAQ,EAAE;MACf,IAAI,CAACL,MAAM,CAACC,MAAM,CAAC,mBAAmB,EAAEI,QAAQ,CAAC;MACjD,IAAI,CAACtB,aAAY,GAAI,IAAI,EAAE;IAC7B;EACF,CAAC;;EACDuB,QAAQ,EAAE;IACRC,YAAYA,CAAA,EAAG;MACb,IAAI,IAAI,CAAC5B,kBAAiB,IAAK,IAAI,CAACA,kBAAkB,CAAC6B,KAAK,EAAE;QAC5D,OAAO,IAAI,CAAC7B,kBAAkB,CAAC6B,KAAK,CAACC,IAAI,CACtClB,IAAI,IAAKA,IAAG,KAAM,IAAI,CAACS,MAAM,CAACU,KAAK,CAACH,YACvC,CAAC;MACH;MACA,OAAO,IAAI;IACb;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}